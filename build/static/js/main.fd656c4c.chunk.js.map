{"version":3,"sources":["BooksAPI.js","SingleBook.js","BookShelf.js","MyReadPage.js","SearchPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SingleBook","_this","this","react_default","a","createElement","className","style","width","height","backgroundImage","props","bookImage","onChange","e","onShelfChange","value","currentValue","disabled","bookTitle","bookAuthors","Component","BookShelf","shelfTitle","booksIn","map","shelfName","includes","key","src_SingleBook","title","authors","join","imageLinks","thumbnail","MyReadPage","src_BookShelf","react_router_dom","to","SearchPage","type","placeholder","updateQuery","target","booksFromSearch","textAlign","marginBottom","BooksApp","state","currentBooks","bookID","onSearch","myBooks","bID","setState","BooksAPI","trim","length","searchBookID","b","newbooks","filter","finalbook","catch","error","console","log","selectedShelf","allBooks","_this2","_this3","react_router","exact","path","render","src_MyReadPage","src_SearchPage","React","ReactDOM","src_App","document","getElementById"],"mappings":"uQACMA,SAAM,yCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAQNS,EAAS,kBACpBC,MAAK,GAAAC,OAAIZ,EAAJ,UAAiB,CAAEO,YACrBM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,SAEVC,EAAS,SAACC,EAAMC,GAAP,OACpBT,MAAK,GAAAC,OAAIZ,EAAJ,WAAAY,OAAiBO,EAAKE,IAAM,CAC/BC,OAAQ,MACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACHhB,EADE,CAELkB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAER,YACtBP,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERc,EAAS,SAACC,GAAD,OACpBnB,MAAK,GAAAC,OAAIZ,EAAJ,WAAkB,CACrBsB,OAAQ,OACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACHhB,EADE,CAELkB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEE,YACtBjB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SACdF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,gBCTVc,mLA9BF,IAAAC,EAAAC,KAEL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAACC,MAAO,IAAKC,OAAQ,IACxDC,gBAAe,aAAA7B,OAAgBqB,KAAKS,MAAMC,UAA3B,aACXT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQQ,SAAU,SAACC,GAAD,OAAMb,EAAKU,MAAMI,cAAcD,IAAIE,MAAOd,KAAKS,MAAMM,cACnEd,EAAAC,EAAAC,cAAA,UAAQW,MAAM,GAAGE,UAAQ,GAAzB,cACAf,EAAAC,EAAAC,cAAA,UAAQW,MAAM,oBAAd,qBACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,cAAd,gBAEAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,QACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,WAIZb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,IAA8BJ,KAAKS,MAAMQ,UAAzC,KACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,IAAgCJ,KAAKS,MAAMS,YAA3C,aArBUC,aC0CXC,mLArCF,IAAArB,EAAAC,KACL,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,IAAkCJ,KAAKS,MAAMY,WAA7C,KACApB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACTJ,KAAKS,MAAMa,QAAQC,IAAI,SAACrC,GAAD,OACpBa,EAAKU,MAAMe,UAAUC,SAASvC,EAAKC,OACnCc,EAAAC,EAAAC,cAAA,MAAIuB,IAAKxC,EAAKE,IAENa,EAAAC,EAAAC,cAACwB,EAAD,CACIV,UAAW/B,EAAK0C,MAChBV,YAAahC,EAAK2C,QAAW3C,EAAK2C,QAAQC,KAAK,OAAS,UACxDpB,UAAWxB,EAAK6C,WAAWC,UAC3BjB,aAAc7B,EAAKC,MACnB0B,cAAe,SAACD,GAAD,OAAMb,EAAKU,MAAMI,cAAc3B,EAAK0B,OAI7D,eAtBVO,aCsDTc,mLAhDP,OACIhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC+B,EAAD,CACIZ,QAAStB,KAAKS,MAAMa,QACpBE,UAAWxB,KAAKS,MAAMe,UAAUC,SAAS,oBAAsB,mBAAqB,GACpFJ,WAAY,oBACZR,cAAeb,KAAKS,MAAMI,gBAG9BZ,EAAAC,EAAAC,cAAC+B,EAAD,CACIZ,QAAStB,KAAKS,MAAMa,QACpBE,UAAWxB,KAAKS,MAAMe,UAAUC,SAAS,cAAgB,aAAe,GACxEJ,WAAY,eACZR,cAAeb,KAAKS,MAAMI,gBAG9BZ,EAAAC,EAAAC,cAAC+B,EAAD,CACIZ,QAAStB,KAAKS,MAAMa,QACpBE,UAAWxB,KAAKS,MAAMe,UAAUC,SAAS,QAAU,OAAS,GAC5DJ,WAAY,OACZR,cAAeb,KAAKS,MAAMI,kBAOlCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAM/B,UAAU,SAASgC,GAAG,WAA5B,uBAxCKjB,aC0EVkB,mLAtEF,IAAAtC,EAAAC,KAGL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAM/B,UAAU,eAAegC,GAAG,KAAlC,SAIAnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,SACImC,KAAK,OACLC,YAAY,4BACZzB,MAAOd,KAAKS,MAAMZ,MAClBc,SAAU,SAACC,GAAD,OAAOb,EAAKU,MAAM+B,YAAY5B,EAAE6B,OAAO3B,YAM7Db,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAC2B,kBAAhCJ,KAAKS,MAAMiC,gBAEZ1C,KAAKS,MAAMiC,gBAAgBnB,IAAI,SAACrC,GAAD,OAE3Be,EAAAC,EAAAC,cAAA,MAAIuB,IAAKxC,EAAKE,IACVa,EAAAC,EAAAC,cAACwB,EAAD,CACIV,UAAW/B,EAAK0C,MAChBV,YAAahC,EAAK2C,QAAU3C,EAAK2C,QAAQC,KAAK,OAAS,UACvDpB,UAAWxB,EAAK6C,WAAWC,UAC3BjB,aAAc7B,EAAKC,MACnB0B,cAAe,SAACD,GAAD,OAAMb,EAAKU,MAAMI,cAAc3B,EAAK0B,SAQ/DX,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACsC,UAAW,WACpB1C,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACuC,aAAa,KAAzB,yDADJ,+0CA5CHzB,aC0IV0B,6MAtIbC,MAAQ,CACNC,aAAc,GACdL,gBAAiB,GACjB7C,MAAO,GACP2B,UAAU,GACVwB,OAAO,MAeTC,SAAW,SAACpD,GAEV,IAAMqD,EAAUnD,EAAK+C,MAAMC,aACrBI,EAAMpD,EAAK+C,MAAME,OAEvBjD,EAAKqD,SAAS,CAACvD,MAAOA,IAUtBwD,EAAgBxD,EAAMyD,QACnB1E,KAAK,SAACC,GAEH,GAAc,KAAVgB,GAAgBhB,EAElB,GAAGA,EAAI0E,OAAS,EAAG,CACjB,IAAIC,EAAe3E,EAAI0C,IAAI,SAAAkC,GAAC,OAAIA,EAAErE,KAU9BsE,EARW7E,EAAI8E,OAAO,SAACF,GAAD,OAAOA,EAAE1B,aAIRR,IAAK,SAAAkC,GAAC,OAAAnE,OAAAC,EAAA,EAAAD,CAAA,GAASmE,EAAT,CAAYtE,MAAO,WAIzBwE,OAAO,SAACF,GAAD,OAAON,EAAI1B,SAASgC,EAAErE,MAOpDwE,EAJWV,EAAQS,OAAO,SAAAF,GAAC,OAAID,EAAa/B,SAASgC,EAAErE,MAIlCT,OAAO+E,GAGhC3D,EAAKqD,SAAS,CACVV,gBAAiBkB,SAIvB7D,EAAKqD,SAAS,CAAEV,gBAAiB,uBAKjC3C,EAAKqD,SAAS,CAAEV,gBAAiB,oBAItCmB,MAAM,SAAAC,GAAK,OACVC,QAAQC,IAAIF,QAQlBjD,cAAgB,SAAC3B,EAAO0B,GACtB,IAAMqD,EAAgBrD,EAAE6B,OAAO3B,MAE/BuC,EAAgBnE,EAAO+E,GAClBrF,KACCyE,IACGzE,KAAK,SAACsF,GACHnE,EAAKqD,SAAS,CACVL,aAAcmB,2FApFZ,IAAAC,EAAAnE,KAClBqD,IACCzE,KAAK,SAACC,GACLsF,EAAKf,SAAS,CACVL,aAAalE,EACb2C,UAAW3C,EAAI0C,IAAI,SAACkC,GAAD,OAAMA,EAAEtE,QAC3B6D,OAAQnE,EAAI0C,IAAI,SAACkC,GAAD,OAAMA,EAAErE,0CAqFvB,IAAAgF,EAAApE,KAEP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAS,kBAE7BvE,EAAAC,EAAAC,cAACsE,EAAD,CAEEnD,QAAS8C,EAAKtB,MAAMC,aACpBlC,cAAeuD,EAAKvD,cACpBW,UAAW4C,EAAKtB,MAAMtB,eAM1BvB,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAQE,KAAK,UAAUC,OAAQ,kBAE7BvE,EAAAC,EAAAC,cAACuE,EAAD,CACA7E,MAAOuE,EAAKtB,MAAMjD,MAClB2C,YAAa4B,EAAKnB,SAClBP,gBAAiB0B,EAAKtB,MAAMJ,gBAC5B7B,cAAeuD,EAAKvD,2BA3HP8D,IAAMxD,iBCF7ByD,IAASJ,OACLvE,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACIlC,EAAAC,EAAAC,cAAC0E,EAAD,OACeC,SAASC,eAAe","file":"static/js/main.fd656c4c.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n      .then(data => data.books)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n class SingleBook extends Component {   \r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                <div className=\"book-cover\" style={{width: 128, height: 193,  \r\n                backgroundImage: `url(   \"  ${ this.props.bookImage  }  \"  )` }}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        <select onChange={(e)=> this.props.onShelfChange(e)} value={this.props.currentValue}>\r\n                            <option value=\"\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            \r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\"> {this.props.bookTitle} </div>\r\n                <div className=\"book-authors\"> {this.props.bookAuthors} </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nSingleBook.propTypes = {\r\n    bookTitle: PropTypes.string.isRequired,\r\n    bookImage: PropTypes.string.isRequired,\r\n    currentValue: PropTypes.string.isRequired,\r\n    bookAuthors: PropTypes.string.isRequired\r\n}\r\nexport default SingleBook","import React, { Component } from 'react'\r\nimport SingleBook from './SingleBook'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BookShelf extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\"> {this.props.shelfTitle} </h2>\r\n                    <div className=\"bookshelf-books\">\r\n                        <ol className=\"books-grid\">    \r\n                            {this.props.booksIn.map((book)=> (\r\n                                this.props.shelfName.includes(book.shelf) ?\r\n                                <li key={book.id}>\r\n                                        \r\n                                        <SingleBook\r\n                                            bookTitle={book.title}\r\n                                            bookAuthors={book.authors ?  book.authors.join(' - ') : 'Unknown'}\r\n                                            bookImage={book.imageLinks.thumbnail}\r\n                                            currentValue={book.shelf}\r\n                                            onShelfChange={(e)=> this.props.onShelfChange(book,e)}\r\n                                            />                          \r\n                                    </li> \r\n                            \r\n                                : ''  )\r\n                            )}\r\n\r\n                        </ol>\r\n                    </div>\r\n                </div>         \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nBookShelf.propTypes = {\r\n    booksIn: PropTypes.array.isRequired,\r\n    shelfName: PropTypes.string.isRequired,\r\n    shelfTitle: PropTypes.string.isRequired,\r\n    onShelfChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BookShelf","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BookShelf from './BookShelf'\r\n\r\n\r\nclass MyReadPage extends Component {\r\n\r\n\r\n  render() {\r\n      \r\n        return (\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                </div>\r\n\r\n                <div className=\"list-books-content\">\r\n                    <div>\r\n\r\n                    <BookShelf\r\n                        booksIn={this.props.booksIn}\r\n                        shelfName={this.props.shelfName.includes('currentlyReading') ? 'currentlyReading' : ''}\r\n                        shelfTitle={'Currently Reading'} \r\n                        onShelfChange={this.props.onShelfChange}\r\n                        /> \r\n\r\n                    <BookShelf     \r\n                        booksIn={this.props.booksIn}\r\n                        shelfName={this.props.shelfName.includes('wantToRead') ? 'wantToRead' : ''}\r\n                        shelfTitle={'Want To Read'}\r\n                        onShelfChange={this.props.onShelfChange}\r\n                        />\r\n                    \r\n                    <BookShelf\r\n                        booksIn={this.props.booksIn}\r\n                        shelfName={this.props.shelfName.includes('read') ? 'read' : ''}\r\n                        shelfTitle={'Read'}\r\n                        onShelfChange={this.props.onShelfChange}\r\n                    />\r\n                                             \r\n                    </div>\r\n                </div>\r\n\r\n                {/* To search page*/}\r\n                <div className=\"open-search\">\r\n                    <Link className=\"button\" to='/search'>\r\n                        Add a book\r\n                    </Link>\r\n                </div>\r\n\r\n          \r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default MyReadPage\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport SingleBook from './SingleBook'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass SearchPage extends Component {\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link className=\"close-search\" to='/'>\r\n                        Close\r\n                    </Link>\r\n\r\n                    <div className=\"search-books-input-wrapper\">                  \r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Search by title or author\" \r\n                            value={this.props.query}\r\n                            onChange={(e) => this.props.updateQuery(e.target.value)}\r\n                             />\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                    {(typeof(this.props.booksFromSearch) !== 'string') ?\r\n\r\n                            this.props.booksFromSearch.map((book)=> (\r\n\r\n                                <li key={book.id}>\r\n                                    <SingleBook\r\n                                        bookTitle={book.title}\r\n                                        bookAuthors={book.authors ? book.authors.join(' - ') : 'Unknown'}\r\n                                        bookImage={book.imageLinks.thumbnail}\r\n                                        currentValue={book.shelf}\r\n                                        onShelfChange={(e)=> this.props.onShelfChange(book,e)}                                        \r\n                                        />\r\n                                </li> \r\n                            ))\r\n\r\n                        : \r\n                        \r\n                            \r\n                            <div style={{textAlign: 'center'}}>\r\n                                <h3 style={{marginBottom:20}}> Search for new books and Notice the valid queries : </h3>\r\n                                {`\r\n                                    'Android', 'Art', 'Artificial Intelligence', 'Astronomy', 'Austen', 'Baseball', \r\n                                    'Basketball', 'Bhagat', 'Biography', 'Brief', 'Business', 'Camus', 'Cervantes', \r\n                                    'Christie', 'Classics', 'Comics', 'Cook', 'Cricket', 'Cycling', 'Desai', 'Design',\r\n                                    'Development', 'Digital Marketing', 'Drama', 'Drawing', 'Dumas', 'Education', \r\n                                    'Everything', 'Fantasy', 'Film', 'Finance', 'First', 'Fitness', 'Football', \r\n                                    'Future', 'Games', 'Gandhi', 'Homer', 'Horror', 'Hugo', 'Ibsen', 'Journey',\r\n                                    'Kafka', 'King', 'Lahiri', 'Larsson', 'Learn', 'Literary Fiction', 'Make',\r\n                                    'Manage', 'Marquez', 'Money', 'Mystery', 'Negotiate', 'Painting', 'Philosophy',\r\n                                    'Photography', 'Poetry', 'Production', 'Programming', 'React', 'Redux', 'River',\r\n                                    'Robotics', 'Rowling', 'Satire', 'Science Fiction', 'Shakespeare', 'Singh', 'Swimming',\r\n                                    'Tale', 'Thrun', 'Time', 'Tolstoy', 'Travel', 'Ultimate', 'Virtual Reality', 'Web Development', 'iOS'.\r\n                                `}\r\n                            </div>\r\n                                       \r\n                    }\r\n                    </ol>\r\n                </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\nSearchPage.propTypes = {\r\n    query: PropTypes.string.isRequired,\r\n    updateQuery: PropTypes.func.isRequired,\r\n    onShelfChange: PropTypes.func.isRequired,\r\n}\r\nexport default SearchPage","import React from 'react'\r\nimport './App.css'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport {Route} from 'react-router-dom'\r\n\r\nimport MyReadPage from './MyReadPage'\r\nimport SearchPage from './SearchPage'\r\n\r\nclass BooksApp extends React.Component {\r\n  // All Books data \r\n  state = {\r\n    currentBooks: [],\r\n    booksFromSearch: [],\r\n    query: '',\r\n    shelfName:'',\r\n    bookID:'',\r\n  }\r\n  // Get the current books data in main read page from a fake API\r\n  componentDidMount() {\r\n    BooksAPI.getAll()\r\n    .then((res)=> {\r\n      this.setState({\r\n          currentBooks:res,\r\n          shelfName: res.map((b)=> b.shelf),\r\n          bookID: res.map((b)=> b.id),\r\n      })\r\n    })\r\n  }\r\n\r\n  // Get new books data from search to be add in my reads books\r\n  onSearch = (query) => {\r\n\r\n    const myBooks = this.state.currentBooks;\r\n    const bID = this.state.bookID;\r\n\r\n    this.setState({query: query})\r\n    /**\r\n     * - On search ask if the input not empty then the response > 0\r\n     * - then get the books from a fake backend API  to modify and show them \r\n     * - if the input are empty or not empty but there's no response (mean invalid query)\r\n     * - this will return invalid string to show massege with the valid queries\r\n     * - other than that modify the response\r\n     */\r\n    \r\n    // Get search result for books from fake API\r\n    BooksAPI.search(query.trim())\r\n      .then((res)=>{\r\n        // console.log(res)\r\n          if (query !== '' && res) {\r\n            \r\n            if(res.length > 0) {\r\n              let searchBookID = res.map(b => b.id)\r\n              // define the books that has a poster\r\n              let hasCover = res.filter((b) => b.imageLinks)\r\n              // console.log(hasCover)\r\n\r\n              // add shelf key for new books obj = none\r\n              let addDefShelf = hasCover.map( b => ({...b, shelf: 'none' }) ) \r\n              // console.log(addDefShelf)\r\n\r\n              // filter the book that found on my shelves\r\n              let newbooks = addDefShelf.filter((b)=> !bID.includes(b.id))\r\n\r\n              // Get the same books from my book\r\n              let oldbooks = myBooks.filter(b => searchBookID.includes(b.id))\r\n              // console.log(oldbooks)\r\n\r\n              // Then Merges the arrays\r\n              let finalbook = oldbooks.concat(newbooks)\r\n              // console.log(finalbook)\r\n              \r\n              this.setState({\r\n                  booksFromSearch: finalbook\r\n              })\r\n\r\n            } else { \r\n            this.setState({ booksFromSearch: 'Invalid query'})\r\n              \r\n            } \r\n\r\n          } else { // to show message with the valid queries in search component\r\n            this.setState({ booksFromSearch: 'Invalid query'})\r\n              \r\n          }     \r\n      })\r\n      .catch(error => (\r\n        console.log(error)\r\n      ))  \r\n  }\r\n  /**\r\n   * - on the select options cliked define the book and the selected value (shelfName) \r\n   * - then move that book to the selected shelf in myreads page \r\n   * - then get the data again from the backend \r\n   */\r\n  onShelfChange = (book , e) => {\r\n    const selectedShelf = e.target.value;\r\n\r\n    BooksAPI.update(book , selectedShelf)\r\n        .then(\r\n          BooksAPI.getAll()\r\n            .then((allBooks)=> {\r\n                this.setState({\r\n                    currentBooks: allBooks\r\n                })\r\n            })\r\n        )\r\n  }\r\n    \r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path='/' render={ ()=> (\r\n\r\n          <MyReadPage \r\n\r\n            booksIn={this.state.currentBooks}\r\n            onShelfChange={this.onShelfChange}\r\n            shelfName={this.state.shelfName}\r\n            \r\n            /> \r\n        )}\r\n        />\r\n\r\n        <Route  path='/search' render={()=> (   \r\n\r\n          <SearchPage\r\n          query={this.state.query}\r\n          updateQuery={this.onSearch}\r\n          booksFromSearch={this.state.booksFromSearch}\r\n          onShelfChange={this.onShelfChange}\r\n\r\n            // bookIn={this.state.currentBooks}\r\n            // currentShelf={this.state.shelfName}\r\n          />\r\n        )}\r\n        />\r\n          \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter> , document.getElementById('root'))\r\n"],"sourceRoot":""}