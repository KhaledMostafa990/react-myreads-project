{"version":3,"sources":["BooksAPI.js","SingleBook.js","BookShelf.js","MyReadPage.js","SearchPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SingleBook","_this","this","react_default","a","createElement","className","style","width","height","backgroundImage","props","bookImage","onChange","e","onShelfChange","value","currentValue","disabled","bookTitle","bookAuthors","Component","BookShelf","shelfTitle","booksIn","map","bookShelf","key","src_SingleBook","title","authors","imageLinks","thumbnail","MyReadPage","src_BookShelf","react_router_dom","to","SearchPage","type","placeholder","updateQuery","target","booksFromSearch","BooksApp","state","currentBooks","selectedShelf","BooksAPI","setInterval","allBooks","setState","trim","_this2","_this3","react_router","exact","path","render","src_MyReadPage","src_SearchPage","bookIn","currentShelf","wantShelf","readShelf","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.61486057.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n class SingleBook extends Component {   \r\n    // state = {\r\n    //     select: this.props.currentValue,\r\n    // }\r\n\r\n\r\n    render() {\r\n        // console.log(this.props.currentValue)\r\n        // console.log(this.state.select)\r\n        \r\n        return (\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div className=\"book-cover\" style={{width: 128, height: 193, backgroundImage: `url(${this.props.bookImage})`}}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        <select onChange={(e)=> this.props.onShelfChange(e)} value={this.props.currentValue}>\r\n                            <option value=\"none\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            \r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\"> {this.props.bookTitle} </div>\r\n                <div className=\"book-authors\"> {this.props.bookAuthors} </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nSingleBook.propTypes = {\r\n    bookTitle: PropTypes.string.isRequired,\r\n    bookAuthors: PropTypes.array.isRequired,\r\n    bookImage: PropTypes.string.isRequired,\r\n    currentValue: PropTypes.string.isRequired,\r\n    // newSlected: PropTypes.string.isRequired,\r\n}\r\nexport default SingleBook","import React, { Component } from 'react'\r\nimport SingleBook from './SingleBook'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BookShelf extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\"> {this.props.shelfTitle} </h2>\r\n                    <div className=\"bookshelf-books\">\r\n                        <ol className=\"books-grid\">    \r\n                            {this.props.booksIn.map((book)=> (\r\n                                // book.shelf === this.props.bookShelf && book.id ? \r\n                                this.props.bookShelf === book.shelf ?\r\n                                    <li key={book.id}>\r\n                                        <SingleBook\r\n                                            bookTitle={book.title}\r\n                                            bookAuthors={book.authors}\r\n                                            bookImage={book.imageLinks.thumbnail}\r\n                                            currentValue={book.shelf}\r\n                                            onShelfChange={(e)=> this.props.onShelfChange(book,e)}\r\n                                            // newSlected={this.props.newSlected}\r\n                                            />\r\n                                            \r\n                                    </li> \r\n                            \r\n                                : '' )\r\n                            )}\r\n\r\n                        </ol>\r\n                    </div>\r\n                </div>         \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nBookShelf.propTypes = {\r\n    booksIn: PropTypes.array.isRequired,\r\n    bookShelf: PropTypes.string.isRequired,\r\n    shelfTitle: PropTypes.string.isRequired,\r\n    onShelfChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BookShelf","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BookShelf from './BookShelf'\r\n// import * as BooksAPI from './BooksAPI'\r\n// import SearchPage from './SearchPage'\r\n// import PropTypes from 'prop-types'\r\n// import SearchPage from './SearchPage'\r\n// import {Route} from 'react-router-dom'\r\n\r\nclass MyReadPage extends Component {\r\n\r\n//     state = {\r\n//         // Defined array for all Books data \r\n//         books: [],\r\n//     }\r\n// componentDidMount() {\r\n//     BooksAPI.getAll()\r\n//       .then((res)=> {\r\n\r\n//         this.setState({\r\n//             books:res,\r\n    \r\n//         })\r\n//       })\r\n//   }\r\n//   onShelfChange = (book , e) => {\r\n//     const selectedShelf = e.target.value;\r\n//     // const currentShelf = book.shelf\r\n//     // console.log(book.id, selectedShelf, currentShelf);\r\n//     BooksAPI.update(book , selectedShelf)\r\n\r\n//     setInterval(() => {\r\n//         BooksAPI.getAll()\r\n//             .then((allBooks)=> {\r\n//                 this.setState({\r\n//                     books: allBooks\r\n//                 })\r\n//             })\r\n//     }, 200);\r\n        \r\n//   }\r\n\r\n// updateQuery = (query) => {\r\n//     this.setState({query: query.trim()})\r\n//     BooksAPI.search(query)\r\n//         .then((res)=>{\r\n//              this.setState({\r\n//             booksFromSearch: res\r\n//         })\r\n//             console.log(this.state.booksFromSearch[0])\r\n//         })\r\n//     console.log(query)\r\n// }\r\n\r\n  render() {\r\n        return (\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                </div>\r\n\r\n                <div className=\"list-books-content\">\r\n                    <div>\r\n\r\n                    <BookShelf\r\n                        booksIn={this.props.booksIn}\r\n                        bookShelf={'currentlyReading'}\r\n                        shelfTitle={'Currently Reading'} \r\n                        onShelfChange={this.props.onShelfChange}\r\n                        /> \r\n\r\n                    <BookShelf     \r\n                        booksIn={this.props.booksIn}\r\n                        bookShelf={'wantToRead'}\r\n                        shelfTitle={'Want To Read'}\r\n                        onShelfChange={this.props.onShelfChange}\r\n                        />\r\n                    \r\n                    <BookShelf\r\n                        booksIn={this.props.booksIn}\r\n                        bookShelf={'read'}\r\n                        shelfTitle={'Read'}\r\n                        onShelfChange={this.props.onShelfChange}\r\n                    />\r\n                                             \r\n                    </div>\r\n                </div>\r\n\r\n                {/* To search page*/}\r\n                <div className=\"open-search\">\r\n                    <Link to='/search'>\r\n                        <button>Add a book</button>\r\n                    </Link>\r\n                </div>\r\n\r\n          \r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default MyReadPage\r\n\r\n//  <div className=\"bookshelf\">\r\n//                             <h2 className=\"bookshelf-title\">{`Want to Read`}  </h2>\r\n\r\n//                             <div className=\"bookshelf-books\">\r\n//                                 <ol className=\"books-grid\">\r\n//                                 {this.state.books.map((book)=> ( \r\n//                                     book.shelf === 'wantToRead' ? \r\n\r\n//                                         <li key={book.id}>\r\n//                                             <SingleBook \r\n//                                                 bookTitle={book.title}\r\n//                                                 bookAuthors={book.authors}\r\n//                                                 bookImage={book.imageLinks.thumbnail}\r\n//                                             />\r\n//                                         </li>\r\n//                                     : ''\r\n//                                 ))}\r\n//                                 </ol>\r\n//                             </div>\r\n//                         </div>\r\n\r\n//                         <div className=\"bookshelf\">\r\n//                             <h2 className=\"bookshelf-title\"> {`Read`}  </h2>\r\n\r\n//                             <div className=\"bookshelf-books\">\r\n//                                 <ol className=\"books-grid\">\r\n//                                 {this.state.books.map((book)=> ( \r\n//                                     book.shelf === 'read' ? \r\n//                                         <li key={book.id}>\r\n//                                             <SingleBook \r\n//                                                 bookTitle={book.title}\r\n//                                                 bookAuthors={book.authors}\r\n//                                                 bookImage={book.imageLinks.thumbnail}\r\n//                                             />\r\n//                                         </li>\r\n//                                     : ''\r\n//                                 ))}\r\n//                                 </ol>\r\n//                             </div>\r\n//                         </div>\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// import * as BooksAPI from './BooksAPI'\r\nimport SingleBook from './SingleBook'\r\n// import PropTypes from 'prop-types'\r\n\r\nclass SearchPage extends Component {\r\n\r\n//       state = {\r\n//     /**\r\n//      * TODO: Instead of using this state variable to keep track of which page\r\n//      * we're on, use the URL in the browser's address bar. This will ensure that\r\n//      * users can use the browser's back and forward buttons to navigate between\r\n//      * pages, as well as provide a good URL they can bookmark and share.\r\n//      */\r\n//     // query: '',\r\n//     // booksFromSearch: [],\r\n//   }\r\n\r\n//   componentDidMount(){\r\n//       this.updateQuery = (query) => {\r\n//         this.setState({query: query.trim()})\r\n//         BooksAPI.search(query)\r\n//           .then((res)=>{\r\n//             this.setState({\r\n//               booksFromSearch: res\r\n//             })\r\n//             console.log(this.state.booksFromSearch[0])\r\n//           })\r\n//         console.log(query)\r\n//       }\r\n// }\r\n\r\n\r\n\r\n\r\n    render() {\r\n    // console.log(this.state.booksFromSearch.length)\r\n            // console.log(this.state.booksFromSearch.map((b)=>b.title))\r\n\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                       <Link to='/'><button className=\"close-search\">Close</button></Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        {/*\r\n                        NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                        You can find these search terms here:\r\n                        https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                        However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                        you don't find a specific author or title. Every search is limited by search terms.\r\n                        */}\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Search by title or author\" \r\n                            value={this.props.query}\r\n                            onChange={(e) => this.props.updateQuery(e.target.value)}\r\n                             />\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                    \r\n                        {this.props.booksFromSearch.map((book)=> (\r\n                            // book.shelf === this.props.bookShelf && book.id ? \r\n\r\n                                <li key={book.id}>\r\n                                    <SingleBook\r\n                                        bookTitle={book.title}\r\n                                        bookAuthors={book.authors}\r\n                                        bookImage={book.imageLinks.thumbnail}\r\n                                        // currentValue={book.shelf}\r\n                                        onShelfChange={(e)=> this.props.onShelfChange(book,e)}\r\n                                        // newSlected={this.props.newSlected}\r\n                                        />\r\n\r\n                                </li> \r\n                            \r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n// SearchPage.prototype = {\r\n//     // query: PropTypes.string.isRequired,\r\n// }\r\nexport default SearchPage","import React from 'react'\r\nimport './App.css'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport {Route} from 'react-router-dom'\r\n\r\nimport MyReadPage from './MyReadPage'\r\nimport SearchPage from './SearchPage'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n        // Defined array for all Books data \r\n    currentBooks: [],\r\n    query: '',\r\n    booksFromSearch: [],\r\n  }\r\ncomponentDidMount() {\r\n    BooksAPI.getAll()\r\n      .then((res)=> {\r\n        this.setState({\r\n            currentBooks:res,\r\n    \r\n        })\r\n      })\r\n  }\r\n\r\n  onShelfChange = (book , e) => {\r\n    const selectedShelf = e.target.value;\r\n    // const currentShelf = book.shelf\r\n    // console.log(book.id, selectedShelf, currentShelf);\r\n    BooksAPI.update(book , selectedShelf)\r\n\r\n    setInterval(() => {\r\n        BooksAPI.getAll()\r\n            .then((allBooks)=> {\r\n                this.setState({\r\n                    currentBooks: allBooks\r\n                })\r\n            })\r\n    }, 200);\r\n        \r\n  }\r\n    \r\n    updateQuery = (query) => {\r\n      this.setState({query: query.trim()})\r\n      BooksAPI.search(query)\r\n        .then((res)=>{\r\n          this.setState({\r\n            booksFromSearch: res\r\n          })\r\n          // console.log(this.state.booksFromSearch)\r\n        })\r\n      // console.log(query)\r\n    }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path='/' render={ ()=> (\r\n\r\n          <MyReadPage \r\n            booksIn={this.state.currentBooks}\r\n            onShelfChange={this.onShelfChange}\r\n          \r\n            /> \r\n        )}\r\n        />\r\n\r\n        <Route  path='/search' render={()=> (   \r\n\r\n          <SearchPage\r\n            query={this.state.query}\r\n            updateQuery={this.updateQuery}\r\n            booksFromSearch={this.state.booksFromSearch}\r\n\r\n            onShelfChange={this.onShelfChange}\r\n            bookIn={this.state.currentBooks}\r\n            currentShelf={'currentlyReading'}\r\n            wantShelf={'wantToRead'}\r\n            readShelf={'read'}\r\n            // booksIn={this.state.currentBooks}\r\n          />\r\n        )}\r\n        />\r\n          \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter> , document.getElementById('root'))\r\n"],"sourceRoot":""}